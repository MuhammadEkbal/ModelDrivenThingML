@startuml
skinparam defaultTextAlignment left
[*] --> behavior
state behavior{
state Running{
	Running : p:MQTT_PSM_PORT?mqtt_setup_psm / \naction do \n' \t  \r\n\t\t\t\t Serial.begin(9600);\r\n\t\t\t\t\r\n\t\t\t\t  delay(10);\r\n\t\t\t\t  // We start by connecting to a WiFi network\r\n\t\t\t\t  Serial.println();\r\n\t\t\t\t  Serial.print(\"Connecting to \");\r\n\t\t\t\t  Serial.println(' & p.ssid & ');\r\n\t\t\t\t\r\n\t\t\t\t  WiFi.begin(' & p.ssid & ', ' & p.password & ');\r\n\t\t\t\t\r\n\t\t\t\t  while (WiFi.status() != WL_CONNECTED) {\r\n\t\t\t\t    delay(500);\r\n\t\t\t\t    Serial.print(\".\");\r\n\t\t\t\t  }\r\n\t\t\t\t\r\n\t\t\t\t  randomSeed(micros());\r\n\t\t\t\t\r\n\t\t\t\t  Serial.println(\"\");\r\n\t\t\t\t  Serial.println(\"WiFi connected\");\r\n\t\t\t\t  Serial.println(\"IP address: \");\r\n\t\t\t\t  Serial.println(WiFi.localIP());\r\n\r\n\t\t\t\t  client.setServer(' & p.mqtt_server & ', ' & p.mqtt_port & ');\r\n\t\t\t\t  //configure the NTP server \r\n\t\t\t\t  configTime(timezone, dst, \"pool.ntp.org\",\"time.nist.gov\");\r\n  \t\t\t\t  Serial.println(\"\\nWaiting for Internet time\");\r\n\r\n  \t\t\t\t  while(!time(nullptr)){\r\n     \t\t\t  Serial.print(\"*\");\r\n     \t\t\t  delay(1000);\r\n  \t\t\t\t }\r\n  \t\t\t\tSerial.println(\"\\nTime response....OK\");\r\n\t\t\t\t  \r\n\t\t\t\t  '\nmqtt_topic = p.mqtt_topic\nmqtt_qos = p.mqtt_qos\nmqtt_retain = p.mqtt_retain\nstation_id = p.station_id\nstation_owner = p.station_owner\nend\n
	Running : p:MQTT_PSM_PORT?mqtt_send_psm / \naction do \nx_property = 'x;'\nif(x_property == 1) do\ndo \nMQTT_PSM_PORT!JAVA_DECISION_psm(1)\n'  Serial.println(\"klaaaapt\");'\nend\nend else do\nMQTT_PSM_PORT!JAVA_DECISION_psm(0)\n\n'\r\n\t\t\tclient.setCallback(callback);\t \r\n\t\t\t\t\t\t \r\n\t\t\t  if (!client.connected()) {\r\n\t\t\t    // Loop until we are reconnected\r\n\t\t\t    while (!client.connected()) {\r\n\t\t\t      Serial.print(\"Attempting MQTT connection...\");\r\n\t\t\t      // Create a random client ID\r\n\t\t\t      String clientId = \"ESP8266Client-\";\r\n\t\t\t      clientId += String(random(0xffff), HEX);\r\n\t\t\t      // Attempt to connect\r\n\t\t\t      if (client.connect(clientId.c_str())) {\r\n\t\t\t        Serial.println(\"connected\");\r\n\t\t\t        // ... and resubscribe\r\n\t\t\t        client.setCallback(callback);\t \r\n\t\t\t        \r\n\t\t\t        client.subscribe(\"JavaOutTopicThingML\");\r\n\t\t\t      } else {\r\n\t\t\t        // Wait 5 seconds before retrying\r\n\t\t\t        delay(5000);\r\n\t\t\t      }\r\n\t\t\t    }\r\n\t\t\t  }\r\n\t\t\t  client.loop();\r\n\t\t\t\r\n\t\t\t//get the time and date from NTP server\r\n\t\t\t  time_t now = time(nullptr);\r\n\t\t\t  struct tm* p_tm = localtime(&now);\r\n\t\t\t  Serial.print(p_tm->tm_mday);\r\n\t\t\t  Serial.print(\"/\");\r\n\t\t\t  Serial.print(p_tm->tm_mon + 1);\r\n\t\t\t  Serial.print(\"/\");\r\n\t\t\t  Serial.print(p_tm->tm_year + 1900);\r\n\t\t\t  \r\n\t\t\t  Serial.print(\" \");\r\n\t\t\t  \r\n\t\t\t  Serial.print(p_tm->tm_hour);\r\n\t\t\t  Serial.print(\":\");\r\n\t\t\t  Serial.print(p_tm->tm_min);\r\n\t\t\t  Serial.print(\":\");\r\n\t\t\t  Serial.println(p_tm->tm_sec);\r\n\t\t\t  Serial.print(now);\r\n\r\n  // Prepare a JSON payload string\r\n  /*String payload = \"{\";\r\n      payload += \"\\\"id\\\":\"; payload += ' & station_id & '; payload += \",\";\r\n      payload += \"\\\"timestamp\\\":\"; payload += now; payload += \",\";\r\n      payload += \"\\\"pm25\\\":\"; payload += ' & p.pm25 & '; payload += \",\";\r\n      payload += \"\\\"pm10\\\":\"; payload += ' & p.pm10 & '; payload += \",\";\r\n      payload += \"\\\"hum\\\":\"; payload += ' & p.humidity & '; payload += \",\";\r\n      payload += \"\\\"press\\\":\"; payload += ' & p.pressure & '; payload += \",\";\r\n      payload += \"\\\"temp\\\":\"; payload += ' & p.temperature & '; payload += \",\";\r\n      payload += \"\\\"version\\\":\"; payload += 1;\r\n  payload += \"}\";\r\n  */\r\n\r\n  // Prepare a JSON payload string\r\n  String payloadWeather = \"{\";\r\n      payloadWeather += \"\\\"weather\\\":\";\r\n      payloadWeather += \"{\";\r\n      payloadWeather += \"\\\"id\\\":\\\"\"; payloadWeather += ' & station_id & '; payloadWeather += \"\\\",\";\r\n      payloadWeather += \"\\\"timestamp\\\":\"; payloadWeather += now; payloadWeather += \",\";\r\n      payloadWeather += \"\\\"pm25\\\":\"; payloadWeather += ' & p.pm25 & '; payloadWeather += \",\";\r\n      payloadWeather += \"\\\"pm10\\\":\"; payloadWeather += ' & p.pm10 & '; payloadWeather += \",\";\r\n      payloadWeather += \"\\\"hum\\\":\"; payloadWeather += ' & p.humidity & '; payloadWeather += \",\";\r\n      payloadWeather += \"\\\"press\\\":\"; payloadWeather += ' & p.pressure & '; payloadWeather += \",\";\r\n      payloadWeather += \"\\\"temp\\\":\"; payloadWeather += ' & p.temperature & ';\r\n  \t  payloadWeather += \"}\";\r\n  \t  payloadWeather += \"}\";\r\n  \t  \r\n  // Send payload\r\n  /*\r\n  char attributes[600];\r\n  payload.toCharArray( attributes, 600 );\r\n  client.publish(' & mqtt_topic & ', attributes,' & mqtt_retain & ');\r\n  Serial.println( attributes );\r\n  */\r\n\r\n  // Send payloadWeather\r\n  char attributesWeather[600];\r\n  payloadWeather.toCharArray( attributesWeather, 600 );\r\n  client.publish(' & mqtt_topic & ', attributesWeather,' & mqtt_retain & ');\r\n  Serial.println( attributesWeather );\r\n  delay(500);\r\n  '\nend\n
}
[*] --> Running
}
@enduml
