/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.java.*;
import org.thingml.java.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : APP_2_PIM
 **/
public class APP_2_PIM extends Component implements IAPP_2_PIM_JavaApp_PORT {

private List<AttributeListener> attListener = new ArrayList<AttributeListener>();
public void addAttributeListener(AttributeListener listener){
this.attListener.add(listener);
}

public void removeAttributeListener(AttributeListener listener){
this.attListener.remove(listener);
}

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
@Override
public String toString() {
String result = "instance " + getName() + "\n";
result += "";
return result;
}

private Collection<IAPP_2_PIM_JavaApp_PORTClient> JavaApp_PORT_clients = Collections.synchronizedCollection(new LinkedList<IAPP_2_PIM_JavaApp_PORTClient>());
public synchronized void registerOnJavaApp_PORT(IAPP_2_PIM_JavaApp_PORTClient client){
JavaApp_PORT_clients.add(client);
}

public synchronized void unregisterFromJavaApp_PORT(IAPP_2_PIM_JavaApp_PORTClient client){
JavaApp_PORT_clients.remove(client);
}

@Override
public synchronized void weather_via_JavaApp_PORT(String JavaAppMSGs_weather_id_var, int JavaAppMSGs_weather_timestamp_var, int JavaAppMSGs_weather_pm25_var, int JavaAppMSGs_weather_pm10_var, int JavaAppMSGs_weather_hum_var, int JavaAppMSGs_weather_press_var, int JavaAppMSGs_weather_temp_var){
receive(weatherType.instantiate(JavaAppMSGs_weather_id_var, JavaAppMSGs_weather_timestamp_var, JavaAppMSGs_weather_pm25_var, JavaAppMSGs_weather_pm10_var, JavaAppMSGs_weather_hum_var, JavaAppMSGs_weather_press_var, JavaAppMSGs_weather_temp_var), JavaApp_PORT_port);
}

private void sendTempState_via_JavaApp_PORT(String JavaAppMSGs_tempState_thestate_var){
//ThingML send
JavaApp_PORT_port.send(tempStateType.instantiate(JavaAppMSGs_tempState_thestate_var));
//send to other clients
for(IAPP_2_PIM_JavaApp_PORTClient client : JavaApp_PORT_clients){
client.tempState_from_JavaApp_PORT(JavaAppMSGs_tempState_thestate_var);
}}

//Attributes
//Ports
private Port JavaApp_PORT_port;
//Message types
protected final TempStateMessageType tempStateType = new TempStateMessageType();
public TempStateMessageType getTempStateType(){
return tempStateType;
}

protected final WeatherMessageType weatherType = new WeatherMessageType();
public WeatherMessageType getWeatherType(){
return weatherType;
}

//CEP Streams
//Empty Constructor
public APP_2_PIM() {
super();
}

//Constructor (all attributes)
public APP_2_PIM(String name) {
super(name);
}

//Getters and Setters for non readonly/final attributes
//Getters for Ports
public Port getJavaApp_PORT_port() {
return JavaApp_PORT_port;
}
private CompositeState buildAPP_2_PIM_SC(){
final List<AtomicState> states_APP_2_PIM_SC = new ArrayList<AtomicState>();
final AtomicState state_APP_2_PIM_SC_READY = new AtomicState("READY")
;
states_APP_2_PIM_SC.add(state_APP_2_PIM_SC_READY);
final List<Region> regions_APP_2_PIM_SC = new ArrayList<Region>();
final List<Handler> transitions_APP_2_PIM_SC = new ArrayList<Handler>();
transitions_APP_2_PIM_SC.add(new InternalTransition("2134446249",weatherType, JavaApp_PORT_port, state_APP_2_PIM_SC_READY){
@Override
public void doExecute(final Event e) {
final WeatherMessageType.WeatherMessage weather = (WeatherMessageType.WeatherMessage) e;
System.out.print(weather.id);
System.out.print(weather.temp);
if(weather.temp > 25) {
System.out.print("so warm realy! \n");
sendTempState_via_JavaApp_PORT((String) ("High Temperature"));

} else {
if(weather.temp < 15) {
sendTempState_via_JavaApp_PORT((String) ("COLD Temperature"));

} else {
sendTempState_via_JavaApp_PORT((String) ("Normal Temperature"));

}

}
}

});
final CompositeState state_APP_2_PIM_SC = new CompositeState("SC", states_APP_2_PIM_SC, state_APP_2_PIM_SC_READY, transitions_APP_2_PIM_SC, regions_APP_2_PIM_SC, false){
@Override
public void onEntry() {
System.out.print("Started!\n");
super.onEntry();
}

}
;
return state_APP_2_PIM_SC;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
JavaApp_PORT_port = new Port(PortType.REQUIRED, "JavaApp_PORT", this);
} else {
JavaApp_PORT_port = ((APP_2_PIM)root).JavaApp_PORT_port;
}
createCepStreams();if (session == null){
//Init state machine
behavior = buildAPP_2_PIM_SC();
}
return this;
}

}
